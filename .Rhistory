geom_tile()
basexn   <- basicmodx(countrydat$xn, optimpars, len = forecastlen)
modeldat <- data.frame(date = c(countrydat$date,as.Date(latest_date) + 1:forecastlen),
basexn = basexn, baseyn = xntoyn(basexn))
#Newtons method, r_1 = r_0 - f(r_0)/f'(r_0)
base_r_zero <- (optimpars[2]/optimpars[3])^(1/(2*optimpars[1]))
base_r_one  <- base_r_zero -basef(base_r_zero,optimpars)/basefprime(base_r_zero,optimpars)
base_r_one  <- round(base_r_one,3)
roptimpars  <- round(optimpars,3)
labs$basexn <- list(bquote("basic model, "~x[n]*"=new cases/day; a="*.(roptimpars[2])*", b="*.(roptimpars[3])*", q="*.(roptimpars[1])*";  r="*.(base_r_one)*"; ||x*-x||="*.(norm(optimpars,countrydat$xn))))
ynnorm      <- modnorm(countrydat$yn, modeldat$baseyn[1:length(countrydat$yn)])
labs$baseyn <- list(bquote("basic model, "~y[n]*"=cumulative cases; a="*.(roptimpars[2])*", b="*.(roptimpars[3])*", q="*.(roptimpars[1])*", ||y*-y||="*.(ynnorm)))
plots[["basexn"]] <- plot_basexn(countrydat, modeldat, cols, labs)
plots[["baseyn"]] <- plot_baseyn(countrydat, modeldat, cols, labs)
optimC <- optim(par = countrydat$xn[1], normC, method = "Brent",
lower = 1, upper = 2*max(countrydat$xn[!is.na(countrydat$xn)]),
x = basexn[1:nrow(countrydat)], r = base_r_one)$par
modeldat$Crn <- optimC*base_r_one^(1:nrow(modeldat))
labs$Crn <- list(bquote(Cr^n*", r="*.(base_r_one)*", C="*.(floor(optimC))))
plots[["Crn"]] <- plot_crn(countrydat, modeldat, cols, labs)
mavgx1 <- movingavg(countrydat$xn[!is.na(countrydat$xn)])
countrydat$mavgx3 <- movingavg(mavgx1)
x3norm  <- modnorm(countrydat$xn,countrydat$mavgx3)
labs$x3 <- list(bquote("moving average x*(3); ||x*(3)-x*||="*.(x3norm)))
plots[["mavgx3"]] <- plot_mavgx3(countrydat, modeldat, cols, labs)
#parameters of the form (ci,pi,ni)
##an = a1 + c1 sin(2??/p1 (n ??? n1))
aseqper <- seq(from = optimpars[2]*0.8, to = optimpars[2]*1.2, length.out = 5)
bseqper <- seq(from = optimpars[3]*0.8, to = optimpars[2]*1.2, length.out = 5)
c_1seq  <- c_2seq <- seq(0.04, 0.2, length.out = 10)
n_1seq  <- n_2seq <- 1#1:8
p_1seq  <- p_2seq <- 6:7
normdatp <- expand.grid(a  = aseqper, b  = bseqper,
c1 = c_1seq,  c2 = c_2seq,
p1 = p_1seq,  p2 = p_2seq,
n1 = n_1seq,  n2 = n_2seq)
pernorm <- apply(normdatp, 1, function(x) normper(x, q = 7, countrydat$xn))
normdatp$pernorm <- pernorm
peroptim   <- normdatp[which.min(pernorm),1:8]
optpernorm <- normdatp[which.min(pernorm),9]
modeldat$modxPeriodic <- modxper(as.numeric(peroptim),countrydat$xn, q = optimpars[1], forecastlen)
peroptim <- round(as.numeric(peroptim),3)
#a,b,c1,c2,p1,p2,n1,n2
labs$periodic <- list(bquote("periodic model,"~x[n]*"=new cases/day;"
~a*"="*.(peroptim[1])*","~ b*"="*.(peroptim[2])*","
~q*"="*.(optimpars[1])*";"~"||x*-x||="*.(optpernorm)*";"
~c[1]*"="*.(peroptim[3])*","~p[1]*"="*.(peroptim[5])*","
~n[1]*"="*.(peroptim[7])*","~c[2]*"="*.(peroptim[4])*","
~p[2]*"="*.(peroptim[6])*","~n[2]*"="*.(peroptim[8])))
plots[["periodic"]] <- plot_periodic(countrydat, modeldat, cols, labs)
dat_ts <- ts(data = countrydat$xn, frequency = optimpars[1])
if(any(countrydat$xn <= 0)){
plots[["hw"]] <- ggplot(data.frame(x=0,y=0)) +
geom_label(x=0, y=0, label="Error: Country data has nonpositive values",
color="red", size=5 , fontface="bold" ) +
xlim(-1,1) + ylim(-1,1) +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank())
} else{
hw.add     <- HoltWinters(dat_ts, seasonal = "additive")
hwmethod   <- "multiplicative"
xnonlylast <- c(rep(NA, nrow(countrydat)-1), countrydat$xn[length(countrydat$xn)])
hwfcst     <- forecast::hw(dat_ts, h = forecastlen, seasonal = hwmethod)
hwfcst$lower[hwfcst$lower[,2] < 0,2] <- 0
hwfcst$upper[hwfcst$upper[,2] < 0,2] <- 0
hwfcst$mean[hwfcst$mean < 0] <- 0
modeldat$hwxn <- c(hwfcst$fitted, hwfcst$mean)
modeldat$hwlo <- c(hwfcst$fitted, hwfcst$lower[,2])
modeldat$hwhi <- c(hwfcst$fitted, hwfcst$upper[,2])
modeldat$hwyn  <- xntoyn(modeldat$hwxn)
modeldat$hwylo <- xntoyn(modeldat$hwlo)
modeldat$hwyhi <- xntoyn(modeldat$hwhi)
hwnorm <- modnorm(countrydat$xn,hwfcst$fitted)
labs$hw   <- paste0("HoltWinters algorithm,  ||x*-x||=", modnorm(countrydat$xn,hwfcst$fitted))
labs$hwy  <- paste0("HoltWinters algorithm,  ||y*-y||=", modnorm(countrydat$yn,modeldat$hwyn[1:nrow(countrydat)]))
labs$hwpi <- "HW 95% Prediction Interval"
plots[["hw"]]  <- plot_hw(countrydat, modeldat, cols, labs)
plots[["hwy"]] <- plot_hwy(countrydat, modeldat, cols, labs)
}
auto.fit <- auto.arima(dat_ts)
getArmaModel <- function(arma){
return(paste0("ARIMA(", paste0(arma[c(1,3,2)],collapse = ","), ")(",
paste0(arma[c(6,4,7)], collapse = ","), ")[", arma[5], "]"))
}
arima.fcst <- forecast(auto.fit, level = c(80, 95), h = forecastlen)
arima.fcst$lower[arima.fcst$lower[,2] < 0,2] <- 0
arima.fcst$upper[arima.fcst$upper[,2] < 0,2] <- 0
arima.fcst$mean[arima.fcst$mean < 0] <- 0
arimanorm <- modnorm(countrydat$xn,arima.fcst$fitted)
arimalabs    <- getArmaModel(auto.fit$arma)
labs$arima   <- paste0(arimalabs, ", ||x*-x||=", arimanorm)
labs$arimapi <- "ARIMA 95% Prediction Interval"
modeldat$arimaxn <- c(auto.fit$fitted, arima.fcst$mean)
modeldat$arimalo <- c(auto.fit$fitted,arima.fcst$lower[,2])
modeldat$arimahi <- c(auto.fit$fitted,arima.fcst$upper[,2])
modeldat$arimayn  <- xntoyn(modeldat$arimaxn)
modeldat$arimaylo <- xntoyn(modeldat$arimalo)
modeldat$arimayhi <- xntoyn(modeldat$arimahi)
labs$arimay  <- paste0(arimalabs, ", ||y*-y||=", modnorm(countrydat$yn,modeldat$arimayn[1:nrow(countrydat)]))
plots[["arima"]] <- plot_arima(countrydat, modeldat, cols, labs)
plots[["arimay"]] <- plot_arimay(countrydat, modeldat, cols, labs)
plots[["hwarima"]] <- plot_hwarima(countrydat, modeldat, cols, labs)
nnfit   <- nnetar(dat_ts, lambda=0)
nn.fcst <- forecast(nnfit, h=forecastlen)
nn.fcst$mean[nn.fcst$mean < 0] <- 0
nn.fcst$fitted[1:7] <- countrydat$xn[1:7]
modeldat$nnxn <- c(nn.fcst$fitted, nn.fcst$mean)
modeldat$nnyn <- xntoyn(modeldat$nnxn)
labs$nn  <- paste0(nnfit$method, ", ||x*-x||=", modnorm(countrydat$xn,nn.fcst$fitted))
labs$nny <- paste0(nnfit$method, ", ||y*-y||=", modnorm(countrydat$yn,modeldat$nnyn[1:nrow(countrydat)]))
plots[["nn"]] <- plot_nn(countrydat, modeldat, cols, labs)
plots[["nny"]] <- plot_nny(countrydat, modeldat, cols, labs)
return(plots)
}
datebounds <- list(
"Italy"       = c("2020-11-14", "2020-12-30"),
"USA"         = c("2020-11-14", "2020-12-30"),
"Ireland"     = c("2020-11-14", "2020-12-30")
#"Germany"     = c("2020-09-21", "2020-10-30"),
#"Netherlands" = c("2020-09-21", "2020-10-27"),
#"Spain"       = c("2020-09-21", "2020-10-27"),
#"UK"          = c("2020-09-21", "2020-10-27")
)
for(country in names(datebounds)){
plotslist[[country]] <- covidPlots(country, datebounds[[country]], webdat)
}
which.min(normdat$abnorm)
normdat[which.min(normdat$abnorm),]
normdat[normdat$abnorm==0,]
optimpars <- c(7,normdat[normdat$abnorm==0,1:2])
optimpars <- as.numeric(c(7,normdat[normdat$abnorm==0,1:2]))
basexn   <- basicmodx(countrydat$xn, optimpars, len = forecastlen)
modeldat <- data.frame(date = c(countrydat$date,as.Date(latest_date) + 1:forecastlen),
basexn = basexn, baseyn = xntoyn(basexn))
#Newtons method, r_1 = r_0 - f(r_0)/f'(r_0)
base_r_zero <- (optimpars[2]/optimpars[3])^(1/(2*optimpars[1]))
base_r_one  <- base_r_zero -basef(base_r_zero,optimpars)/basefprime(base_r_zero,optimpars)
base_r_one  <- round(base_r_one,3)
roptimpars  <- round(optimpars,3)
labs$basexn <- list(bquote("basic model, "~x[n]*"=new cases/day; a="*.(roptimpars[2])*", b="*.(roptimpars[3])*", q="*.(roptimpars[1])*";  r="*.(base_r_one)*"; ||x*-x||="*.(norm(optimpars,countrydat$xn))))
ynnorm      <- modnorm(countrydat$yn, modeldat$baseyn[1:length(countrydat$yn)])
labs$baseyn <- list(bquote("basic model, "~y[n]*"=cumulative cases; a="*.(roptimpars[2])*", b="*.(roptimpars[3])*", q="*.(roptimpars[1])*", ||y*-y||="*.(ynnorm)))
plots[["basexn"]] <- plot_basexn(countrydat, modeldat, cols, labs)
plots[["baseyn"]] <- plot_baseyn(countrydat, modeldat, cols, labs)
plots[["basexn"]]
plots[["baseyn"]]
Q
countyplotlist$rep
ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank())
# just latest date
latest_date <- countycases$TimeStampDate[nrow(countycases)]
latest_dat  <- countycases[countycases$TimeStampDate == latest_date,]
# make shape data ggplot-friendly
countyshp@data$id <- rownames(countyshp@data)
countyshp.points  <- fortify(countyshp, region="id")
counties <- inner_join(countyshp.points, countyshp@data, by="id")
counties$CountyName <- gsub("County ", "", counties$NAME_EN)
# join case numbers for latest date to county data, in order to colour nicely
countycase_map <- left_join(counties, latest_dat, by=c("CountyName" = "CountyName"))
# color gradient
col_grad <- wes_palette("Zissou1", 20, type = "continuous")
# county plots
countyplotlist[["rep"]] <- ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank())
countyplotlist[["rep"]]
ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
legend.position  = c(0.1,0.9))
ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
legend.position  = c(0.2,0.8))
ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
legend.position  = c(0.2,0.85))
ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
legend.title = element_blank(),
legend.background = element_blank(),
legend.position  = c(0.3,0.85))
ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
legend.title = element_blank(),
legend.background = element_blank(),
legend.position  = c(0.25,0.9))
ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
legend.title = element_blank(),
legend.background = element_blank(),
legend.position  = c(0.25,0.84))
ggplot(countycase_map) +
aes(long, lat, group=group, fill=PopulationProportionCovidCases) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
geom_text(data = latest_dat, aes(x = Long, y = Lat, label = floor(PopulationProportionCovidCases)), inherit.aes = FALSE) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("Up to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
legend.title = element_blank(),
legend.background = element_blank(),
legend.position  = c(0.25,0.86))
setwd("~/GitHub/TCD_FinalYearProject/Code")
source("countymap.r")
for(p in names(countyplotlist)){
ggsave(filename = paste0("county-", p, ".png"),
plot     = countyplotlist[[p]],
path     = "Plots",
height   = 14,
width    = 14,
units    = "cm"
)
}
setwd("~/GitHub/TCD_FinalYearProject")
for(p in names(countyplotlist)){
ggsave(filename = paste0("county-", p, ".png"),
plot     = countyplotlist[[p]],
path     = "Plots",
height   = 14,
width    = 14,
units    = "cm"
)
}
ggplot(world_map) +
aes(long, lat, group=group, fill=Cumulative_number_for_14_days_of_COVID.19_cases_per_100000) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("From", format.Date(latest_date-13, "%B %d, %Y"), "to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
plot.margin      = margin(0, 0, 0, 0, "cm"),
legend.title      = element_blank(),
legend.background = element_blank(),
legend.position   = c(0.1,0.4))
ggplot(world_map) +
aes(long, lat, group=group, fill=Cumulative_number_for_14_days_of_COVID.19_cases_per_100000) +
geom_polygon(colour="grey40") + labs(fill = "Cases per 100k") +
scale_fill_gradientn(colours = col_grad) +
ggtitle("Cumulative cases per 100,000 population by county",
subtitle = paste("From", format.Date(latest_date-13, "%B %d, %Y"), "to", format.Date(latest_date, "%B %d, %Y"))) +
theme(axis.title       = element_blank(),
axis.text        = element_blank(),
axis.ticks       = element_blank(),
panel.background = element_blank(),
plot.margin      = margin(0, 0, 0, 0, "cm"),
legend.title      = element_blank(),
legend.background = element_blank(),
legend.position   = c(0.1,0.4))
setwd("~/GitHub/TCD_FinalYearProject/Code")
source("covidplots-group.r")
for(country in names(multilist)){
for(p in names(multilist[[country]])){
ggsave(filename = paste0(country, "-", p, "mult.png"),
plot     = multilist[[country]][[p]],
path     = "Plots",
height   = 10,
width    = 16,
units    = "cm"
)
}
}
setwd("~/GitHub/TCD_FinalYearProject")
for(country in names(multilist)){
for(p in names(multilist[[country]])){
ggsave(filename = paste0(country, "-", p, "mult.png"),
plot     = multilist[[country]][[p]],
path     = "Plots",
height   = 10,
width    = 16,
units    = "cm"
)
}
}
multilist$Ireland
multidates <- list(
"Italy"   = list(c("2020-10-01", "2020-10-21"),
c("2020-10-22", "2020-12-26")),
"Ireland" = list(c("2020-10-01", "2020-11-13"),
c("2020-11-14", "2020-12-26")),
"USA"     = list(c("2020-10-01", "2020-11-13"),
c("2020-11-14", "2020-12-26"))
)
for(country in names(multidates)){
multilist[[country]] <- multiphasePlots(country, multidates[[country]], webdat)
}
multilist$Ireland$xn
multilist$Italy$xn
multidates <- list(
"Italy"   = list(c("2020-10-01", "2020-11-08"),
c("2020-11-09", "2020-12-26")),
"Ireland" = list(c("2020-10-01", "2020-10-21"),
c("2020-10-22", "2020-12-26")),
"USA"     = list(c("2020-10-01", "2020-11-13"),
c("2020-11-14", "2020-12-26"))
)
for(country in names(multidates)){
multilist[[country]] <- multiphasePlots(country, multidates[[country]], webdat)
}
multilist$Italy$xn
multilist$Ireland$xn
multilist$Ireland$perxn
for(country in names(multilist)){
for(p in names(multilist[[country]])){
ggsave(filename = paste0(country, "-", p, "mult.png"),
plot     = multilist[[country]][[p]],
path     = "Plots",
height   = 10,
width    = 16,
units    = "cm"
)
}
}
source("countymap.r")
setwd("~/GitHub/TCD_FinalYearProject/Code")
source("countymap.r")
for(p in names(countyplotlist)){
ggsave(filename = paste0("county-", p, ".png"),
plot     = countyplotlist[[p]],
path     = "Plots",
height   = 14,
width    = 14,
units    = "cm"
)
}
setwd("~/GitHub/TCD_FinalYearProject")
for(p in names(countyplotlist)){
ggsave(filename = paste0("county-", p, ".png"),
plot     = countyplotlist[[p]],
path     = "Plots",
height   = 14,
width    = 14,
units    = "cm"
)
}
for(p in names(worldplot)){
ggsave(filename = paste0("world-", p, ".png"),
plot     = worldplot[[p]],
path     = "Plots",
height   = 14,
width    = 20,
units    = "cm"
)
}
# read the shape files
countyshp <- readOGR("Data/counties.shp")
setwd("~/GitHub/TCD_FinalYearProject/Code")
setwd("~/GitHub/TCD_FinalYearProject/")
# read the shape files
countyshp <- readOGR("Data/counties.shp")
# read the shape files
countyshp <- readOGR("Data/counties.shp")
setwd("~/GitHub/TCD_FinalYearProject/Data/")
# read the shape files
countyshp <- readOGR("counties.shp")
setwd("~/GitHub/TCD_FinalYearProject/Data/")
setwd("~/GitHub/TCD_FinalYearProject/Data/")
list.files()
setwd("~/GitHub/TCD_FinalYearProject/Data")
list.files()
# read the shape files
countyshp <- readOGR("counties.shp")
# read the shape files
countyshp <- readOGR("counties.shp", layer = "counties.shp")
# read the shape files
countyshp <- readOGR("~/GitHub/TCD_FinalYearProject/Data/counties.shp", layer = "counties.shp")
# read the shape files
countyshp <- readOGR("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp", layer = "counties.shp")
# read the shape files
countyshp <- readOGR(path.expand("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp"), layer = "counties.shp")
worldshp  <- readOGR(path.expand("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/world.shp"), layer = "woeld.shp")
# read the shape files
countyshp <- readOGR(path.expand("~/GitHub/TCD_FinalYearProject/Data/counties.shp"), layer = "counties.shp")
setwd()
setwd("~/GitHub/TCD_FinalYearProject/Code")
setwd("~/GitHub/TCD_FinalYearProject/")
# read the shape files
countyshp <- readOGR(path.expand("~/GitHub/TCD_FinalYearProject/Data/counties.shp"), layer = "counties.shp")
# read the shape files
countyshp <- readOGR(path.expand("Data/counties"), layer = "counties.shp")
# read the shape files
countyshp <- readOGR("Data/counties")
library(rgdal)
# read the shape files
countyshp <- readOGR("Data/counties")
# read the shape files
countyshp <- readOGR("counties.shp")
# read the shape files
countyshp <- readOGR("~/GitHub/TCD_FinalYearProject/Data","counties.shp")
# read the shape files
countyshp <- readOGR("~/GitHub/TCD_FinalYearProject/Data/","counties.shp")
# read the shape files
countyshp <- readOGR("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data","counties.shp")
# read the shape files
countyshp <- readOGR("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data","counties")
# read the shape files
datadir <- "C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/"
countyshp <- readOGR(datadir,"counties")
list.dirs(datadir)
countyshp <- readOGR("counties")
list.dirs(datadir)
list.files()
list.files(datadir)
# read the shape files
datadir   <- "C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data"
countyshp <- readOGR(datadir, "counties")
countyshp <- readOGR("C:/Users/Anthony/Downloads/counties/counties.shp")
countyshp <- readOGR("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp")
countyshp <- readOGR("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp")
library(rgdal)
countyshp <- readOGR("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp")
detach("package:sp", unload = TRUE)
library(rgdal)
library(sp)
countyshp <- readOGR("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp")
setwd("~/GitHub/TCD_FinalYearProject/Data")
list.files()
countyshp <- readOGR("counties.shp")
ogrListLayers("counties.shp")
ogrListLayers
countyshp <- readOGR("C:\\Users\\Anthony\\Documents\\GitHub\\TCD_FinalYearProject\\Data\\counties.shp")
countyshp <- readOGR("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data\\counties.shp")
"C:/Users/Anthony/Downloads/counties/counties.shp"
readOGR("C:/Users/Anthony/Downloads/counties/counties.shp")
setwd("~/GitHub/TCD_FinalYearProject/Code")
setwd("~/GitHub/TCD_FinalYearProject/")
countyshp <- readOGR("Data/counties.shp")
library(raster)
install.packages("raster")
library(raster)
countyshp <- shapefile("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp")
file.exists("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp")
countyshp <- shapefile("C:/Users/Anthony/Documents/GitHub/TCD_FinalYearProject/Data/counties.shp")
