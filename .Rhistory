modeldat$hwyhi <- xntoyn(modeldat$hwhi)+prevcases
hwnorm <- modnorm(countrydat$xn,hwfcst$fitted)
labs$hw   <- paste0("HoltWinters algorithm,  ||x*-x||=", modnorm(countrydat$xn,hwfcst$fitted))
labs$hwy  <- paste0("HoltWinters algorithm,  ||y*-y||=", modnorm(countrydat$yn,modeldat$hwyn[1:nrow(countrydat)]))
labs$hwpi <- "HW 95% Prediction Interval"
plots[["hw"]]  <- plot_hw(countrydat, modeldat, cols, labs)
plots[["hwy"]] <- plot_hwy(countrydat, modeldat, cols, labs)
}
auto.fit <- auto.arima(dat_ts, lambda = 0) #keep values positive
getArmaModel <- function(arma){
return(paste0("ARIMA(", paste0(arma[c(1,6,2)],collapse = ","), ")(",
paste0(arma[c(3,7,4)], collapse = ","), ")[", arma[5], "]"))
}
arima.fcst <- forecast(auto.fit, level = c(80, 95), h = forecastlen)
arima.fcst$lower[arima.fcst$lower[,2] < 0,2] <- 0
#arima.fcst$upper[arima.fcst$upper[,2] < 0,2] <- 0
arima.fcst$fitted[1:optimpars[1]] <- countrydat$xn[1:optimpars[1]]
#arima.fcst$mean[arima.fcst$mean < 0] <- 0
arimanorm <- modnorm(countrydat$xn,arima.fcst$fitted)
arimalabs    <- getArmaModel(auto.fit$arma)
labs$arima   <- paste0(arimalabs, ", ||x*-x||=", arimanorm)
labs$arimapi <- "ARIMA 95% Prediction Interval"
modeldat$arimaxn <- c(auto.fit$fitted, arima.fcst$mean)
modeldat$arimalo <- c(auto.fit$fitted,arima.fcst$lower[,2])
modeldat$arimahi <- c(auto.fit$fitted,arima.fcst$upper[,2])
modeldat$arimaxn[1:optimpars[1]] <- countrydat$xn[1:optimpars[1]]
modeldat$arimalo[1:optimpars[1]] <- countrydat$xn[1:optimpars[1]]
modeldat$arimahi[1:optimpars[1]] <- countrydat$xn[1:optimpars[1]]
modeldat$arimayn  <- xntoyn(modeldat$arimaxn) + prevcases
modeldat$arimaylo <- xntoyn(modeldat$arimalo) + prevcases
modeldat$arimayhi <- xntoyn(modeldat$arimahi) + prevcases
labs$arimay  <- paste0(arimalabs, ", ||y*-y||=", modnorm(countrydat$yn,modeldat$arimayn[1:nrow(countrydat)]))
plots[["arima"]] <- plot_arima(countrydat, modeldat, cols, labs)
plots[["arimay"]] <- plot_arimay(countrydat, modeldat, cols, labs)
plots[["hwarima"]] <- plot_hwarima(countrydat, modeldat, cols, labs)
#Box-Cox transformation with lambda=0 to ensure the forecasts stay positive.
nnfit   <- nnetar(dat_ts, p = auto.fit$arma[1], lambda = 0, repeats = 20, maxit = 50)
nn.fcst <- forecast(nnfit, h = forecastlen)
nn.fcst$mean[nn.fcst$mean < 0] <- 0
nn.fcst$fitted[1:optimpars[1]] <- countrydat$xn[1:optimpars[1]]
modeldat$nnxn <- c(nn.fcst$fitted, nn.fcst$mean)
modeldat$nnyn <- xntoyn(modeldat$nnxn) + prevcases
labs$nn  <- paste0(nnfit$method, ", ||x*-x||=", modnorm(countrydat$xn,nn.fcst$fitted))
labs$nny <- paste0(nnfit$method, ", ||y*-y||=", modnorm(countrydat$yn,modeldat$nnyn[1:nrow(countrydat)]))
plots[["nn"]] <- plot_nn(countrydat, modeldat, cols, labs)
plots[["nny"]] <- plot_nny(countrydat, modeldat, cols, labs)
return(plots)
}
grigorDates <- c("2020-04-26", "2020-06-09")
datebounds <- list(
"Italy"         = c("2021-01-02", "2021-02-16"),
"United States" = c("2021-01-06", "2021-02-16"),
"Ireland"       = c("2021-01-12", "2021-02-16"),
"Germany"       = c("2021-01-06", "2021-02-16")
#"Netherlands"   = c("2021-01-06", "2021-02-16"),
#"Spain"         = c("2021-01-06", "2021-02-16"),
#"UK"            = c("2021-01-06", "2021-02-16")
)
owiddat    <- owiddat[!is.na(owiddat$new_cases),]
totaldates <- owiddat$date
totaldat   <- aggregate(owiddat$new_cases, by=list(totaldates), sum)
colnames(totaldat) <- c("Date", "Cases")
latest_date <- totaldat$Date[nrow(totaldat)]
wt_title <- sprintf('Global Total =%s as at %s',
format(sum(totaldat$Cases), big.mark=",", scientific=FALSE),
format.Date(latest_date, "%B %d, %Y"))
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
for(country in names(datebounds)){
plotslist[[country]] <- covidPlots(country, datebounds[[country]], owiddat)
}
plotslist$Ireland$basexn
plotslist$Ireland$nn
plotslist$Ireland$arima
plotslist$Ireland$hw
plotslist$Ireland$periodic
plotslist$Italy$periodic
plotslist$`United States`$periodic
plotslist$Germany$periodic
plotslist$`United States`$periodic
plotslist$`United States`$perparam
setwd("~/GitHub/TCD_FinalYearProject")
owiddat <- read.csv("Data/owid-covid-data.csv")
owiddat$date <- as.Date(owiddat$date, tryFormats = c("%Y-%m-%d"))
owiddat    <- owiddat[!is.na(owiddat$new_cases),]
totaldates <- owiddat$date
totaldat   <- aggregate(owiddat$new_cases, by=list(totaldates), sum)
colnames(totaldat) <- c("Date", "Cases")
latest_date <- totaldat$Date[nrow(totaldat)]
wt_title <- sprintf('Global Total =%s as at %s',
format(sum(totaldat$Cases), big.mark=",", scientific=FALSE),
format.Date(latest_date, "%B %d, %Y"))
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
library(ggplot2)
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
require(ggplot2)
require(forecast)
require(dplyr)
require(wesanderson)
require(gridExtra)
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
plotslist[["WorldTotal"]][["xn"]]
totaldat
totaldat   <- aggregate(owiddat$new_deaths, by=list(totaldates), sum)
colnames(totaldat) <- c("Date", "Cases")
latest_date <- totaldat$Date[nrow(totaldat)]
wt_title <- sprintf('Global Total =%s as at %s',
format(sum(totaldat$Cases), big.mark=",", scientific=FALSE),
format.Date(latest_date, "%B %d, %Y"))
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
plotslist[["WorldTotal"]][["xn"]]
owiddat    <- owiddat[!is.na(owiddat$new_deaths),]
totaldates <- owiddat$date
totaldat   <- aggregate(owiddat$new_deaths, by=list(totaldates), sum)
colnames(totaldat) <- c("Date", "Cases")
latest_date <- totaldat$Date[nrow(totaldat)]
wt_title <- sprintf('Global Total =%s as at %s',
format(sum(totaldat$Cases), big.mark=",", scientific=FALSE),
format.Date(latest_date, "%B %d, %Y"))
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
plotslist[["WorldTotal"]][["xn"]]
unique(owiddat$location)
sum(owiddat$new_cases[owiddat$date == "2021-01-01"])
sum(owiddat$new_cases[owiddat$date == "2020-03-01"])
sum(owiddat$new_cases[owiddat$date == "2020-05-02"])
totaldat   <- owiddat[owiddat$location == "World",]
latest_date <- totaldat$Date[nrow(totaldat)]
totaldat
#colnames(totaldat) <- c("Date", "Cases")
latest_date <- totaldat$date[nrow(totaldat)]
wt_title <- sprintf('Global Total =%s as at %s',
format(sum(totaldat$new_cases), big.mark=",", scientific=FALSE),
format.Date(latest_date, "%B %d, %Y"))
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
plotslist[["WorldTotal"]][["xn"]]
plot_worldtotal <- function(dat){
p <- ggplot(dat, binwidth = 0) +
geom_bar(aes(x = date, y = new_cases),  fill = wes_palettes$Zissou1[1], stat = "identity") +
scale_x_date(date_breaks = "1 month", date_labels = "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0)) +
ggtitle(wt_title) + xntheme()
return(p)
}
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
plotslist[["WorldTotal"]][["xn"]]
plot_xn <- function(countrydat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = cols$xn), stat = "identity") +
scale_x_date(date_breaks = "1 month", date_labels = "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = cols$xn, name = "", labels = labs$xn) +
xntheme()
return(p)
}
plot_yn <- function(countrydat, cols, labs){
p <- ggplot(countrydat) +
geom_line(aes(x = date, y = yn, colour = "blue")) +
geom_point(aes(x = date, y = yn, colour = "blue"))+
scale_x_date(date_breaks = "1 month", date_labels = "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0)) +
scale_colour_manual(values = cols$yn, name = "", labels = labs$yn) +
yntheme()
return(p)
}
plot_basexn <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = cols$xn), stat = "identity") +
geom_point(data = modeldat, aes(x = date, y = basexn, colour = cols$basexn)) +
geom_line(data = modeldat, aes(x = date, y = basexn, colour = cols$basexn)) +
gg_scale_xy +
scale_fill_manual(  name = "leg", values = cols$xn,     labels = labs$xn) +
scale_colour_manual(name = "leg", values = cols$basexn, labels = labs$basexn) +
xntheme()
return(p)
}
plot_baseyn <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat) +
geom_point(aes(x = date, y = yn, colour = "blue")) + geom_line(aes(x = date, y = yn, colour = "blue")) +
geom_point(data = modeldat, aes(x = date, y = baseyn, colour = "base"), shape = 1) +
geom_line(data = modeldat, aes(x = date, y = baseyn, colour = "base")) +
gg_scale_xy +
scale_colour_manual(name = "leg",values = c("blue" = cols$yn, "base" = cols$baseyn),
labels = c("blue" = labs$yn, "base" = labs$baseyn),
guide = guide_legend(override.aes = list(
shape = c("blue"=1, "base" = 16)))) +
yntheme()
return(p)
}
plot_crn <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = cols$xn), stat = "identity") +
geom_point(data = modeldat, aes(x = date, y = basexn, colour = "basexn")) +
geom_line(data = modeldat, aes(x = date, y = basexn, colour = "basexn")) +
geom_line(data = modeldat, aes(x = date, y = Crn, colour = "Crn")) +
gg_scale_xy +
scale_fill_manual(  name = "leg",values = cols$xn, labels = labs$xn) +
scale_colour_manual(name = "leg",
values = c("basexn" = cols$basexn, "Crn" = cols$Crn),
labels = c("basexn" = labs$basexn, "Crn" = labs$Crn),
guide = guide_legend(override.aes = list(
shape = c("basexn" = 16, "Crn" = NA)))) +
xntheme()
return(p)
}
plot_mavgx3 <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = cols$xn), stat = "identity") +
geom_point(data = modeldat, aes(x = date, y = basexn, colour = "basexn")) +
geom_line(data = modeldat, aes(x = date, y = basexn, colour = "basexn")) +
geom_line(data = countrydat, aes(x = date, y = mavgx3, colour = "x3")) +
scale_fill_manual(values = cols$xn, labels = labs$xn) +
scale_colour_manual(values = c("basexn" = cols$basexn, "x3" = cols$x3),
labels = c("basexn" = labs$basexn, "x3" = labs$x3),
guide = guide_legend(override.aes = list(
shape = c("basexn" = 16, "x3" = NA)))) +
gg_scale_xy + xntheme()
return(p)
}
plot_periodic <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = cols$xn), stat = "identity") +
geom_point(data = modeldat, aes(x = date, y = basexn, colour = "base")) +
geom_line(data = modeldat, aes(x = date, y = basexn, colour = "base")) +
geom_line(data = countrydat, aes(x = date, y = mavgx3, colour = "x3")) +
geom_point(data = modeldat,aes(x = date, y = modxPeriodic, colour = "periodic")) +
geom_line(data = modeldat, aes(x = date, y = modxPeriodic, colour = "periodic")) +
gg_scale_xy +
guides(colour=guide_legend(ncol=1,nrow=3,byrow=TRUE),
fill=guide_legend(ncol=1,nrow=1,byrow=TRUE)) +
scale_fill_manual(values = cols$xn, labels = labs$xn) +
scale_colour_manual(values = c("base" = cols$basexn, "periodic" = cols$periodic, "x3" = cols$x3),
labels = c("base" = labs$basexn, "periodic" = labs$periodic, "x3" = labs$x3)) +
guides(colour = guide_legend(override.aes = list(shape = c("base" = 16, "periodic" = 16, "x3" = NA)))) +
xntheme()
return(p)
}
plot_hw <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = "actual"), stat = "identity") +
geom_ribbon(data = modeldat, aes(x = date, ymin = hwlo, ymax = hwhi, fill = "hw"), alpha = 0.5) +
geom_point(data = modeldat, aes(x = date, y = hwxn, colour = "hw")) +
geom_line(data = modeldat, aes(x = date, y = hwxn, colour = "hw")) +
geom_point(data = modeldat, aes(x = date, y = basexn, colour = "base")) +
geom_line(data = modeldat, aes(x = date, y = basexn, colour = "base")) +
geom_point(data = modeldat,aes(x = date, y = modxPeriodic, colour = "periodic")) +
geom_line(data = modeldat, aes(x = date, y = modxPeriodic, colour = "periodic")) +
gg_scale_xy +
guides(colour=guide_legend(ncol=1,nrow=3,byrow=TRUE),
fill=guide_legend(ncol=1,nrow=2,byrow=TRUE)) +
scale_fill_manual(labels = c("actual" = labs$xn, "hw" = labs$hwpi),
values = c("actual" = cols$xn, "hw" = cols$hwpi))+
scale_colour_manual(labels = c("base" = labs$basexn, "hw" = labs$hw, "periodic" = labs$periodic),
values = c("base" = cols$basexn, "hw" = cols$hw, "periodic" = cols$periodic)
) +
xntheme()
return(p)
}
plot_hwy <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat) +
geom_point(aes(x = date, y = yn, colour = "blue")) +
geom_line(aes(x = date, y = yn, colour = "blue")) +
geom_ribbon(data = modeldat, aes(x = date, ymin = hwylo, ymax = hwyhi, fill = "pi"), alpha = 0.5) +
geom_point(data = modeldat, aes(x = date, y = hwyn, colour = "hw"), shape = 5) +
geom_line(data = modeldat, aes(x = date, y = hwyn, colour = "hw")) +
geom_point(data = modeldat, aes(x = date, y = baseyn, colour = "base"), shape = 1) +
geom_line(data = modeldat, aes(x = date, y = baseyn, colour = "base")) +
gg_scale_xy +
guides(colour=guide_legend(ncol=1,nrow=3,byrow=TRUE),
fill=guide_legend(ncol=1,nrow=1,byrow=TRUE)) +
scale_fill_manual(values = c("pi" = cols$hwpi),
labels = c("pi" = labs$hwpi)) +
scale_colour_manual(values = c("actual" = cols$xn, "base" = cols$baseyn, "blue" = cols$yn, "hw" = cols$hw),
labels = c("actual" = labs$xn, "base" = labs$baseyn, "blue" = labs$yn, "hw" = labs$hwy),
guide = guide_legend(override.aes = list(
shape = c("actual" = 16, "base" = 1, "blue"=16, "hw" = 5)))) +
yntheme()
return(p)
}
plot_arima <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = "actual"), stat = "identity") +
geom_ribbon(data = modeldat, aes(x = date, ymin = arimalo, ymax = arimahi, fill = "pi"), alpha = 0.5) +
geom_point(data = modeldat, aes(x = date, y = arimaxn, colour = "arima")) +
geom_line(data = modeldat, aes(x = date, y = arimaxn, colour = "arima")) +
geom_point(data = modeldat, aes(x = date, y = basexn, colour = "base")) +
geom_line(data = modeldat, aes(x = date, y = basexn, colour = "base")) +
geom_point(data = modeldat,aes(x = date, y = modxPeriodic, colour = "periodic")) +
geom_line(data = modeldat, aes(x = date, y = modxPeriodic, colour = "periodic")) +
gg_scale_xy +
guides(colour=guide_legend(ncol=1,nrow=3,byrow=TRUE),
fill=guide_legend(ncol=1,nrow=2,byrow=TRUE)) +
scale_fill_manual(values = c("actual" = cols$xn, "pi" = cols$arimapi),
labels = c("actual" = labs$xn, "pi" = labs$arimapi)) +
scale_colour_manual(values = c("arima" = cols$arima, "base" = cols$basexn, "periodic" = cols$periodic),
labels = c("arima" = labs$arima, "base" = labs$basexn, "periodic" = labs$periodic)) +
xntheme()
return(p)
}
plot_arimay <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat) +
geom_point(aes(x = date, y = yn, colour = "blue")) +
geom_line(aes(x = date, y = yn, colour = "blue")) +
geom_ribbon(data = modeldat, aes(x = date, ymin = arimaylo, ymax = arimayhi, fill = "pi"), alpha = 0.5) +
geom_point(data = modeldat, aes(x = date, y = arimayn, colour = "arima"), shape = 2) +
geom_line(data = modeldat, aes(x = date, y = arimayn, colour = "arima")) +
geom_point(data = modeldat, aes(x = date, y = baseyn, colour = "base"), shape = 1) +
geom_line(data = modeldat, aes(x = date, y = baseyn, colour = "base")) +
gg_scale_xy +
scale_fill_manual(values = c("pi" = cols$arimapi),
labels = c("pi" = labs$arimapi)) +
scale_colour_manual(values = c("arima" = cols$arima, "base" = cols$baseyn, "blue" = cols$yn),
labels = c("arima" = labs$arimay, "base" = labs$baseyn, "blue" = labs$yn),
guide = guide_legend(override.aes = list(
shape = c("arima" = 2, "base" = 1, "blue"=16)))) +
yntheme()
return(p)
}
plot_hwarima <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = "actual"), stat = "identity") +
geom_point(data = modeldat, aes(x = date, y = arimaxn, colour = "arima")) +
geom_line(data = modeldat, aes(x = date, y = arimaxn, colour = "arima")) +
geom_point(data = modeldat, aes(x = date, y = hwxn, colour = "hw")) +
geom_line(data = modeldat, aes(x = date, y = hwxn, colour = "hw")) +
gg_scale_xy +
guides(colour=guide_legend(ncol=1,nrow=2,byrow=TRUE),
fill=guide_legend(ncol=1,nrow=1,byrow=TRUE)) +
scale_fill_manual(values = c("actual" = cols$xn),
labels = c("actual" = labs$xn)) +
scale_colour_manual(values = c("arima" = cols$arima, "hw" = cols$hw),
labels = c("arima" = labs$arima, "hw" = labs$hw)) +
xntheme()
return(p)
}
plot_nn <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = "actual"), stat = "identity") +
geom_point(data = modeldat, aes(x = date, y = basexn, colour = "base")) +
geom_line(data = modeldat, aes(x = date, y = basexn, colour = "base")) +
geom_point(data = modeldat,aes(x = date, y = modxPeriodic, colour = "periodic")) +
geom_line(data = modeldat, aes(x = date, y = modxPeriodic, colour = "periodic")) +
geom_point(data = modeldat, aes(x = date, y = nnxn, colour = "nn")) +
geom_line(data = modeldat, aes(x = date, y = nnxn, colour = "nn")) +
gg_scale_xy +
guides(colour=guide_legend(ncol=1,nrow=3,byrow=TRUE),
fill=guide_legend(ncol=1,nrow=1,byrow=TRUE)) +
scale_fill_manual(values = c("actual" = cols$xn),
labels = c("actual" = labs$xn)) +
scale_colour_manual(values = c("base" = cols$basexn, "nn" = cols$nn, "periodic" = cols$periodic),
labels = c("base" = labs$basexn, "nn" = labs$nn, "periodic" = labs$periodic)) +
xntheme()
return(p)
}
plot_nny <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat) +
geom_point(aes(x = date, y = yn, colour = "blue")) +
geom_line(aes(x = date, y = yn, colour = "blue")) +
geom_point(data = modeldat, aes(x = date, y = baseyn, colour = "base"), shape = 1) +
geom_line(data = modeldat, aes(x = date, y = baseyn, colour = "base")) +
geom_point(data = modeldat, aes(x = date, y = nnyn, colour = "nn"), shape = 0) +
geom_line(data = modeldat, aes(x = date, y = nnyn, colour = "nn")) +
gg_scale_xy +
scale_colour_manual(values = c("base" = cols$baseyn, "blue" = cols$yn, "nn" = cols$nn),
labels = c("base" = labs$baseyn, "blue" = labs$yn, "nn" = labs$nny),
guide = guide_legend(override.aes = list(
shape = c("base" = 1, "blue"=16, "nn" = 0)))) +
yntheme()
return(p)
}
plot_multixn <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = cols$xn), stat = "identity") +
geom_point(data = modeldat, aes(x = date, y = multixn, colour = cols$multixn)) +
geom_line(data = modeldat, aes(x = date, y = multixn, colour = cols$multixn)) +
gg_scale_xy +
scale_fill_manual(  name = "leg",values = cols$xn, labels = labs$xn) +
scale_colour_manual(name = "leg",values = cols$multixn, labels = labs$multixn) +
xntheme()
return(p)
}
plot_multiyn <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat) +
geom_point(aes(x = date, y = yn, colour = "blue")) +
geom_line(aes(x = date, y = yn, colour = "blue")) +
geom_point(data = modeldat, aes(x = date, y = multiyn, colour = "base"), shape = 1) +
geom_line(data = modeldat, aes(x = date, y = multiyn, colour = "base")) +
gg_scale_xy +
scale_colour_manual(name = "leg",values = c("blue" = cols$yn, "base" = cols$multiyn),
labels = c("blue" = labs$yn, "base" = labs$multiyn),
guide = guide_legend(override.aes = list(
shape = c("blue"=1, "base" = 16)))) +
yntheme()
return(p)
}
plot_multiperxn <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat, binwidth = 0) +
geom_bar(aes(x = date, y = xn, fill = cols$xn), stat = "identity") +
geom_point(data = modeldat, aes(x = date, y = multipxn, colour = "multi")) +
geom_line(data = modeldat, aes(x = date, y = multipxn, colour = "multi")) +
geom_line(data = countrydat, aes(x = date, y = mavgx3, colour = "x3")) +
gg_scale_xy +
guides(colour=guide_legend(ncol=1,nrow=2,byrow=TRUE),
fill=guide_legend(ncol=1,nrow=1,byrow=TRUE)) +
scale_fill_manual(values = cols$xn, labels = labs$xn) +
scale_colour_manual(values = c("multi" = cols$multip, "x3" = cols$x3),
labels = c("multi" = labs$multipxn, "x3" = labs$x3)) +
guides(colour = guide_legend(override.aes = list(shape = c("multi" = 16, "x3" = NA)))) +
xntheme()
return(p)
}
plot_multiperyn <- function(countrydat, modeldat, cols, labs){
p <- ggplot(countrydat) +
geom_point(aes(x = date, y = yn, colour = "blue"), shape = 16) +
geom_line(aes(x = date, y = yn, colour = "blue")) +
geom_point(data = modeldat, aes(x = date, y = multipyn, colour = "mult"), shape = 1) +
geom_line(data = modeldat, aes(x = date, y = multipyn, colour = "mult")) +
gg_scale_xy +
scale_colour_manual(name = "leg",values = c("blue" = cols$yn, "mult" = cols$multip),
labels = c("blue" = labs$yn, "mult" = labs$multipyn),
guide = guide_legend(override.aes = list(
shape = c("blue"=16, "mult" = 1)))) +
yntheme()
return(p)
}
plot_worldtotal <- function(dat){
p <- ggplot(dat, binwidth = 0) +
geom_bar(aes(x = date, y = new_cases),  fill = wes_palettes$Zissou1[1], stat = "identity") +
scale_x_date(date_breaks = "1 month", date_labels = "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0)) +
ggtitle(wt_title) + xntheme()
return(p)
}
modnorm <- function(x,modx) return(floor(sum(abs(x-modx))/length(x)))
xntheme <- function(){
p <- theme(axis.text.x        = element_text(vjust = 0.5),
axis.title         = element_blank(),
axis.line          = element_line(),
panel.background   = element_rect(fill  = "grey"),
panel.grid         = element_line(colour = "darkgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.title       = element_blank(),
legend.margin      = margin(0,4,0,4,"pt"),
legend.background  = element_blank(),
legend.text.align  = 0,
legend.box.background  = element_rect(linetype="solid", colour ="darkgrey", size = 0.1, fill = "white"),
legend.spacing     = unit(0, "cm"),
legend.key.size    = unit(0.8,"line"),
legend.key         = element_blank(),
legend.text        = element_text(size = 6),
legend.direction   = "vertical",
legend.box         = "vertical",
legend.box.just    ='left',
legend.position    = "top")
return(p)
}
yntheme <- function(){
p <- theme(axis.text.x        = element_text(vjust = 0.5),
axis.title         = element_blank(),
panel.background   = element_rect(fill  = "grey"),
panel.grid         = element_line(colour = "darkgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.title       = element_blank(),
legend.margin      = margin(4,0,0,4,"pt"),
legend.background  = element_blank(),
legend.key         = element_blank(),
legend.box.background  = element_rect(linetype="solid", colour ="darkgrey", size = 0.1, fill = "white"),
legend.spacing     = unit(0, "cm"),
legend.key.size    = unit(0.8,"line"),
legend.text        = element_text(size = 6),
legend.direction   = "vertical",
legend.box         = "vertical",
legend.box.just    ='left',
legend.position    = "top")
return(p)
}
xntoyn <- function(xn) return(cumsum(xn))
gg_scale_xy <- list(
scale_x_date(date_breaks = "1 week", date_labels = "%d-%b", expand = c(0,0)),
scale_y_continuous(expand = c(0,0)))
plotslist[["WorldTotal"]][["xn"]] <- plot_worldtotal(totaldat)
plotslist[["WorldTotal"]][["xn"]]
setwd("~/GitHub/TCD_FinalYearProject")
ggsave(filename = paste0("WorldTotal-xn.pdf"),
plot     = plotslist[["WorldTotal"]][["xn"]],
path     = "./Plots",
height   = 10,
width    = 14,
units    = "cm"
)
unique(owiddat$location)
setwd("~/GitHub/TCD_FinalYearProject/Code")
source("countymap.r")
setwd("~/GitHub/TCD_FinalYearProject")
for(p in names(countyplotlist)){
ggsave(filename = paste0("county-", p, ".pdf"),
plot     = countyplotlist[[p]],
path     = "Plots",
height   = 14,
width    = 14,
units    = "cm"
)
}
for(p in names(worldplot)){
ggsave(filename = paste0("world-", p, ".pdf"),
plot     = worldplot[[p]],
path     = "Plots",
height   = 14,
width    = 20,
units    = "cm"
)
}
